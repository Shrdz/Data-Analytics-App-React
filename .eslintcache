[{"C:\\Users\\HP\\Desktop\\Shraddha\\data-analytics-app\\src\\index.js":"1","C:\\Users\\HP\\Desktop\\Shraddha\\data-analytics-app\\src\\App.js":"2","C:\\Users\\HP\\Desktop\\Shraddha\\data-analytics-app\\src\\reportWebVitals.js":"3","C:\\Users\\HP\\Desktop\\Shraddha\\data-analytics-app\\src\\components\\DoughnutChart.js":"4","C:\\Users\\HP\\Desktop\\Shraddha\\data-analytics-app\\src\\components\\DashboardComponent.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":170,"mtime":1607282291146,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":990,"mtime":1607294162249,"results":"10","hashOfConfig":"7"},{"size":6752,"mtime":1607294648727,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"15b3w1i",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"C:\\Users\\HP\\Desktop\\Shraddha\\data-analytics-app\\src\\index.js",[],["24","25"],"C:\\Users\\HP\\Desktop\\Shraddha\\data-analytics-app\\src\\App.js",[],"C:\\Users\\HP\\Desktop\\Shraddha\\data-analytics-app\\src\\reportWebVitals.js",[],"C:\\Users\\HP\\Desktop\\Shraddha\\data-analytics-app\\src\\components\\DoughnutChart.js",[],"C:\\Users\\HP\\Desktop\\Shraddha\\data-analytics-app\\src\\components\\DashboardComponent.js",["26"],"import React, { Component } from \"react\";\r\nimport DatePicker from 'react-datepicker';\r\nimport DoughnutChart from \"./DoughnutChart\";\r\nimport '../App.css';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass DashBoard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            startDate: new Date(),\r\n            endDate: new Date(),\r\n            data: []\r\n        }\r\n        this.getTokenAndData = this.getTokenAndData.bind(this);\r\n        this.getDateRange = this.getDateRange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTokenAndData();\r\n    }\r\n\r\n    dateChangeFetchData(startDate, endDate) {\r\n        // console.log(startDate)\r\n        // console.log(endDate)\r\n        if (startDate) {\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                startDate: startDate\r\n            }), this.fetchUpdatedDate)\r\n        }\r\n        if (endDate) {\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                endDate: endDate\r\n            }), this.fetchUpdatedDate)\r\n        }\r\n    }\r\n\r\n    fetchUpdatedDate() {\r\n        if (this.state.startDate && this.state.endDate) {\r\n            this.getData(this.state.startDate + '', this.state.endDate + '');\r\n        }\r\n    }\r\n\r\n    getTokenAndData() {\r\n        let body = { email: \"candidate@sigmoid.com\", password: \"Sigmoid#123\", rememberMe: true };\r\n        fetch(\"https://sigviewauth.sigmoid.io/signIn\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n            .then(response => {\r\n                let json = response.json();\r\n                if (!response.ok) {\r\n                    throw new Error(\"Network response was not ok\");\r\n                }\r\n                return json;\r\n            }).then(res => {\r\n                this.setState({ token: res });\r\n                localStorage.setItem('token', this.state.token.token);\r\n                this.getDateRange();\r\n\r\n            })\r\n            .catch(error => {\r\n                alert(\"Something went wrong!\");\r\n                console.error(\r\n                    \"There has been a problem with your fetch operation:\",\r\n                    error\r\n                );\r\n            });\r\n    }\r\n\r\n    getDateRange() {\r\n        let body = { organization: \"DemoTest\", view: \"Auction\" };\r\n        fetch(\"https://sigviewauth.sigmoid.io/api/v1/getDateRange\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-auth-token\": localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n            .then(response => {\r\n                let json = response.json();\r\n                if (!response.ok) {\r\n                    throw new Error(\"Network response was not ok\");\r\n                }\r\n                return json;\r\n            }).then(res => {\r\n                this.setState({ startDate: +res.result.startDate, endDate: +res.result.endDate })\r\n                this.getData(res.result.startDate, res.result.endDate);\r\n            })\r\n            .catch(error => {\r\n                alert(\"Something went wrong!\");\r\n                console.error(\r\n                    \"There has been a problem with your fetch operation:\",\r\n                    error\r\n                );\r\n            });\r\n    }\r\n\r\n    getData(startDate, endDate) {\r\n        let body = { \"_id\": \"Datastory_ChartId_1535224664111\", \"emailId\": \"candidate@sigmoid.com\", \"orgViewReq\": { \"organization\": \"DemoTest\", \"view\": \"Auction\" }, \"chartObject\": { \"metadata\": { \"title\": \"\", \"img_thumbnail\": \"images/pie.png\", \"chartType\": \"pie\", \"dataLimit\": 500 }, \"text\": [], \"requestParam\": { \"granularity\": \"hour\", \"timeZone\": { \"name\": \"UTC (+00:00)\", \"location\": \"UTC\" }, \"dateRange\": { \"startDate\": startDate, \"endDate\": endDate }, \"xAxis\": [\"D005\"], \"yAxis\": [], \"approxCountDistinct\": [], \"specialCalculation\": [\"CM001\"], \"filter\": [], \"orderBy\": { \"customMetricOrdByList\": [{ \"id\": \"CM001\", \"desc\": true }] }, \"percentCalList\": [{ \"id\": \"CM001\" }] } } };\r\n        fetch(\"https://sigview.sigmoid.io/api/v1/getData\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-auth-token\": localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n            .then(response => {\r\n                let json = response.json();\r\n                if (!response.ok) {\r\n                    throw new Error(\"Network response was not ok\");\r\n                }\r\n                return json;\r\n            }).then(res => {\r\n                this.setState({ data: res.result.data });\r\n            })\r\n            .catch(error => {\r\n                alert(\"Something went wrong!\");\r\n                console.error(\r\n                    \"There has been a problem with your fetch operation:\",\r\n                    error\r\n                );\r\n            });\r\n    }\r\n\r\n    render() {\r\n        let { startDate, endDate, data } = this.state;\r\n        return (\r\n            <div className=\"dashboard\" >\r\n                <h2>Data Analytics Application</h2>\r\n                <div className=\"startdate\">\r\n                    <p>Start date:</p>\r\n                    <DatePicker\r\n                        minDate={startDate}\r\n                        maxDate={endDate}\r\n                        dateFormat=\"dd/MM/yyyy\"\r\n                        selected={startDate}\r\n                        onChange={date => this.dateChangeFetchData(date.getTime(), null)}\r\n                        selectsStart\r\n                        startDate={startDate}\r\n                        endDate={endDate}\r\n                        placeholderText=\"Start Date\"\r\n                    />\r\n                </div>\r\n                <div className=\"enddate\">\r\n                    <p>End date:</p>\r\n                    <DatePicker\r\n                        minDate={startDate}\r\n                        dateFormat=\"dd/MM/yyyy\"\r\n                        maxDate={endDate}\r\n                        selected={endDate}\r\n                        onChange={date => this.dateChangeFetchData(null, date.getTime())}\r\n                        selectsEnd\r\n                        startDate={startDate}\r\n                        endDate={endDate}\r\n                        minDate={startDate}\r\n                        placeholderText=\"End Date\"\r\n                    />\r\n                </div>\r\n                <button className=\"reset\" onClick={this.getDateRange}>Reset</button>\r\n                <DoughnutChart data={data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashBoard;",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":163,"column":25,"nodeType":"33","endLine":163,"endColumn":44},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]