{"version":3,"sources":["components/DoughnutChart.js","components/DashboardComponent.js","App.js","reportWebVitals.js","index.js"],"names":["DoughnutChart","props","isoDates","advIdArray","dataArray","chartData","data","console","log","map","id","push","day","CM001","sort","d","dateObj","Date","getMonth","String","getDate","padStart","getFullYear","color","i","Math","floor","random","labels","datasets","label","fill","backgroundColor","borderColor","className","width","height","options","maintainAspectRatio","DashBoard","state","startDate","endDate","getTokenAndData","bind","getDateRange","this","setState","prevState","fetchUpdatedDate","getData","fetch","method","headers","body","JSON","stringify","email","password","rememberMe","then","response","json","ok","Error","res","token","localStorage","setItem","catch","error","alert","getItem","organization","view","result","minDate","maxDate","dateFormat","selected","onChange","date","dateChangeFetchData","getTime","selectsStart","placeholderText","selectsEnd","onClick","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySA0DeA,MAtDf,SAAuBC,GACrB,IAAqCC,EAAjCC,EAAa,GAAIC,EAAY,GAE7BC,EAAYJ,EAAMK,KACtBC,QAAQC,IAAIH,GACZA,EAAUI,KAAI,SAAAC,GAAE,OAAIP,EAAWQ,KAAKD,EAAGE,QACvCP,EAAUI,KAAI,SAAAC,GAAE,OAAIN,EAAUO,KAAiB,KAAXD,EAAGG,UAavCV,EAAWW,OACXZ,EAAWC,EAAWM,KAAI,SAACM,GACzBA,GAAKA,EACL,IACMC,EAAU,IAAIC,KAAKF,GAKzB,MANmB,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAO,OAAQ,SAAU,YAAa,UAAW,WAAY,YAExGC,EAAQE,YAGV,KAFXC,OAAOH,EAAQI,WAAWC,SAAS,EAAG,KAEd,IADvBL,EAAQM,iBAOXjB,EAAUI,KAxBtB,WAGE,IAFA,IACIc,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAHY,mBAGKE,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOJ,KAkBT,IACMjB,EAAO,CACXsB,OAAQ1B,EACR2B,SAAU,CACR,CACEC,MAAO,gBACPxB,KAAMF,EACN2B,MAAM,EACNC,gBAAiB,uBACjBC,YAAa,wBAKnB,OACE,qBAAKC,UAAU,QAAf,SACE,cAAC,OAAD,CAAM5B,KAAMA,EAAM6B,MAAO,IAAKC,OAAQ,IAAKC,QAAS,CAAEC,qBAAqB,QCwHlEC,G,yDAtKX,WAAYtC,GAAQ,IAAD,8BACf,cAAMA,IACDuC,MAAQ,CACTC,UAAW,IAAIxB,KACfyB,QAAS,IAAIzB,KACbX,KAAM,IAEV,EAAKqC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARL,E,gEAYfE,KAAKH,oB,0CAGWF,EAAWC,GAGvBD,GACAK,KAAKC,UAAS,SAAAC,GAAS,kCAChBA,GADgB,IAEnBP,UAAWA,MACXK,KAAKG,kBAETP,GACAI,KAAKC,UAAS,SAAAC,GAAS,kCAChBA,GADgB,IAEnBN,QAASA,MACTI,KAAKG,oB,yCAKTH,KAAKN,MAAMC,WAAaK,KAAKN,MAAME,SACnCI,KAAKI,QAAQJ,KAAKN,MAAMC,UAAY,GAAIK,KAAKN,MAAME,QAAU,M,wCAIlD,IAAD,OAEdS,MAAM,wCAAyC,CAC3CC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UANJ,CAAEC,MAAO,wBAAyBC,SAAU,cAAeC,YAAY,MAQ7EC,MAAK,SAAAC,GACF,IAAIC,EAAOD,EAASC,OACpB,IAAKD,EAASE,GACV,MAAM,IAAIC,MAAM,+BAEpB,OAAOF,KACRF,MAAK,SAAAK,GACJ,EAAKlB,SAAS,CAAEmB,MAAOD,IACvBE,aAAaC,QAAQ,QAAS,EAAK5B,MAAM0B,MAAMA,OAC/C,EAAKrB,kBAGRwB,OAAM,SAAAC,GACHC,MAAM,yBACNhE,QAAQ+D,MACJ,sDACAA,Q,qCAKA,IAAD,OAEXnB,MAAM,qDAAsD,CACxDC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,eAAgBc,aAAaK,QAAQ,UAEzClB,KAAMC,KAAKC,UAPJ,CAAEiB,aAAc,WAAYC,KAAM,cASxCd,MAAK,SAAAC,GACF,IAAIC,EAAOD,EAASC,OACpB,IAAKD,EAASE,GACV,MAAM,IAAIC,MAAM,+BAEpB,OAAOF,KACRF,MAAK,SAAAK,GACJ,EAAKlB,SAAS,CAAEN,WAAYwB,EAAIU,OAAOlC,UAAWC,SAAUuB,EAAIU,OAAOjC,UACvE,EAAKQ,QAAQe,EAAIU,OAAOlC,UAAWwB,EAAIU,OAAOjC,YAEjD2B,OAAM,SAAAC,GACHC,MAAM,yBACNhE,QAAQ+D,MACJ,sDACAA,Q,8BAKR7B,EAAWC,GAAU,IAAD,OACpBY,EAAO,CAAE,IAAO,kCAAmC,QAAW,wBAAyB,WAAc,CAAE,aAAgB,WAAY,KAAQ,WAAa,YAAe,CAAE,SAAY,CAAE,MAAS,GAAI,cAAiB,iBAAkB,UAAa,MAAO,UAAa,KAAO,KAAQ,GAAI,aAAgB,CAAE,YAAe,OAAQ,SAAY,CAAE,KAAQ,eAAgB,SAAY,OAAS,UAAa,CAAE,UAAab,EAAW,QAAWC,GAAW,MAAS,CAAC,QAAS,MAAS,GAAI,oBAAuB,GAAI,mBAAsB,CAAC,SAAU,OAAU,GAAI,QAAW,CAAE,aAAgB,CAAC,CAAE,GAAM,OAAQ,MAAQ,KAAW,eAAkB,CAAC,CAAE,GAAM,aACtoBS,MAAM,4CAA6C,CAC/CC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,eAAgBc,aAAaK,QAAQ,UAEzClB,KAAMC,KAAKC,UAAUF,KAEpBM,MAAK,SAAAC,GACF,IAAIC,EAAOD,EAASC,OACpB,IAAKD,EAASE,GACV,MAAM,IAAIC,MAAM,+BAEpB,OAAOF,KACRF,MAAK,SAAAK,GACJ,EAAKlB,SAAS,CAAEzC,KAAM2D,EAAIU,OAAOrE,UAEpC+D,OAAM,SAAAC,GACHC,MAAM,yBACNhE,QAAQ+D,MACJ,sDACAA,Q,+BAKN,IAAD,WAC8BxB,KAAKN,MAAlCC,EADD,EACCA,UAAWC,EADZ,EACYA,QAASpC,EADrB,EACqBA,KAC1B,OACI,sBAAK4B,UAAU,YAAf,UACI,4DACA,sBAAKA,UAAU,YAAf,UACI,4CACA,cAAC,IAAD,CACI0C,QAASnC,EACToC,QAASnC,EACToC,WAAW,aACXC,SAAUtC,EACVuC,SAAU,SAAAC,GAAI,OAAI,EAAKC,oBAAoBD,EAAKE,UAAW,OAC3DC,cAAY,EACZ3C,UAAWA,EACXC,QAASA,EACT2C,gBAAgB,kBAGxB,sBAAKnD,UAAU,UAAf,UACI,0CACA,cAAC,KAAD,GACI0C,QAASnC,EACTqC,WAAW,aACXD,QAASnC,EACTqC,SAAUrC,EACVsC,SAAU,SAAAC,GAAI,OAAI,EAAKC,oBAAoB,KAAMD,EAAKE,YACtDG,YAAU,EACV7C,UAAWA,EACXC,QAASA,GARb,wBASaD,GATb,gCAUoB,YAVpB,OAaJ,wBAAQP,UAAU,QAAQqD,QAASzC,KAAKD,aAAxC,mBACA,cAAC,EAAD,CAAevC,KAAMA,W,GAjKbkF,cCITC,MARf,WACE,OACE,qBAAKvD,UAAU,MAAf,SACE,cAAC,EAAD,OCOSwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.5a5294c5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Line } from 'react-chartjs-2';\r\nimport '../App.css';\r\n\r\nfunction DoughnutChart(props) {\r\n  let advIdArray = [], dataArray = [], isoDates = [];\r\n\r\n  let chartData = props.data;\r\n  console.log(chartData)\r\n  chartData.map(id => advIdArray.push(id.day));\r\n  chartData.map(id => dataArray.push(+id.CM001 * 100));\r\n\r\n  //generate random color\r\n  function getRandomColor() {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n  //date in ISO dates\r\n  advIdArray.sort(); // to display from start date\r\n  isoDates = advIdArray.map((d) => {\r\n    d = +d;\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    const dateObj = new Date(d);\r\n    const month = monthNames[dateObj.getMonth()];\r\n    const day = String(dateObj.getDate()).padStart(2, '0');\r\n    const year = dateObj.getFullYear();\r\n    const output = month + '\\n' + day + ',' + year;\r\n    return output;\r\n  })\r\n  // console.log(advIdArray)\r\n  // console.log(isoDates)\r\n\r\n  let color = chartData.map(getRandomColor);\r\n  const data = {\r\n    labels: isoDates,\r\n    datasets: [\r\n      {\r\n        label: \"First dataset\",\r\n        data: dataArray,\r\n        fill: true,\r\n        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        borderColor: \"rgba(75,192,192,1)\"\r\n      }\r\n    ]\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <Line data={data} width={400} height={400} options={{ maintainAspectRatio: false }} />\r\n    </div>\r\n  );\r\n\r\n}\r\nexport default DoughnutChart;","import React, { Component } from \"react\";\r\nimport DatePicker from 'react-datepicker';\r\nimport DoughnutChart from \"./DoughnutChart\";\r\nimport '../App.css';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass DashBoard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            startDate: new Date(),\r\n            endDate: new Date(),\r\n            data: []\r\n        }\r\n        this.getTokenAndData = this.getTokenAndData.bind(this);\r\n        this.getDateRange = this.getDateRange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getTokenAndData();\r\n    }\r\n\r\n    dateChangeFetchData(startDate, endDate) {\r\n        // console.log(startDate)\r\n        // console.log(endDate)\r\n        if (startDate) {\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                startDate: startDate\r\n            }), this.fetchUpdatedDate)\r\n        }\r\n        if (endDate) {\r\n            this.setState(prevState => ({\r\n                ...prevState,\r\n                endDate: endDate\r\n            }), this.fetchUpdatedDate)\r\n        }\r\n    }\r\n\r\n    fetchUpdatedDate() {\r\n        if (this.state.startDate && this.state.endDate) {\r\n            this.getData(this.state.startDate + '', this.state.endDate + '');\r\n        }\r\n    }\r\n    //fetch token info\r\n    getTokenAndData() {\r\n        let body = { email: \"candidate@sigmoid.com\", password: \"Sigmoid#123\", rememberMe: true };\r\n        fetch(\"https://sigviewauth.sigmoid.io/signIn\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n            .then(response => {\r\n                let json = response.json();\r\n                if (!response.ok) {\r\n                    throw new Error(\"Network response was not ok\");\r\n                }\r\n                return json;\r\n            }).then(res => {\r\n                this.setState({ token: res });\r\n                localStorage.setItem('token', this.state.token.token);\r\n                this.getDateRange();\r\n\r\n            })\r\n            .catch(error => {\r\n                alert(\"Something went wrong!\");\r\n                console.error(\r\n                    \"There has been a problem with your fetch operation:\",\r\n                    error\r\n                );\r\n            });\r\n    }\r\n\r\n    getDateRange() {\r\n        let body = { organization: \"DemoTest\", view: \"Auction\" };\r\n        fetch(\"https://sigviewauth.sigmoid.io/api/v1/getDateRange\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-auth-token\": localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n            .then(response => {\r\n                let json = response.json();\r\n                if (!response.ok) {\r\n                    throw new Error(\"Network response was not ok\");\r\n                }\r\n                return json;\r\n            }).then(res => {\r\n                this.setState({ startDate: +res.result.startDate, endDate: +res.result.endDate })\r\n                this.getData(res.result.startDate, res.result.endDate);\r\n            })\r\n            .catch(error => {\r\n                alert(\"Something went wrong!\");\r\n                console.error(\r\n                    \"There has been a problem with your fetch operation:\",\r\n                    error\r\n                );\r\n            });\r\n    }\r\n\r\n    getData(startDate, endDate) {\r\n        let body = { \"_id\": \"Datastory_ChartId_1535224664111\", \"emailId\": \"candidate@sigmoid.com\", \"orgViewReq\": { \"organization\": \"DemoTest\", \"view\": \"Auction\" }, \"chartObject\": { \"metadata\": { \"title\": \"\", \"img_thumbnail\": \"images/pie.png\", \"chartType\": \"pie\", \"dataLimit\": 500 }, \"text\": [], \"requestParam\": { \"granularity\": \"hour\", \"timeZone\": { \"name\": \"UTC (+00:00)\", \"location\": \"UTC\" }, \"dateRange\": { \"startDate\": startDate, \"endDate\": endDate }, \"xAxis\": [\"D002\"], \"yAxis\": [], \"approxCountDistinct\": [], \"specialCalculation\": [\"CM001\"], \"filter\": [], \"orderBy\": { \"dimOrdByList\": [{ \"id\": \"D002\", \"desc\": true }] }, \"percentCalList\": [{ \"id\": \"CM001\" }] } } };\r\n        fetch(\"https://sigview.sigmoid.io/api/v1/getData\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-auth-token\": localStorage.getItem('token')\r\n            },\r\n            body: JSON.stringify(body)\r\n        })\r\n            .then(response => {\r\n                let json = response.json();\r\n                if (!response.ok) {\r\n                    throw new Error(\"Network response was not ok\");\r\n                }\r\n                return json;\r\n            }).then(res => {\r\n                this.setState({ data: res.result.data });\r\n            })\r\n            .catch(error => {\r\n                alert(\"Something went wrong!\");\r\n                console.error(\r\n                    \"There has been a problem with your fetch operation:\",\r\n                    error\r\n                );\r\n            });\r\n    }\r\n\r\n    render() {\r\n        let { startDate, endDate, data } = this.state;\r\n        return (\r\n            <div className=\"dashboard\" >\r\n                <h2>Data Analytics Application</h2>\r\n                <div className=\"startdate\">\r\n                    <p>Start date:</p>\r\n                    <DatePicker\r\n                        minDate={startDate}\r\n                        maxDate={endDate}\r\n                        dateFormat=\"dd/MM/yyyy\"\r\n                        selected={startDate}\r\n                        onChange={date => this.dateChangeFetchData(date.getTime(), null)}\r\n                        selectsStart\r\n                        startDate={startDate}\r\n                        endDate={endDate}\r\n                        placeholderText=\"Start Date\"\r\n                    />\r\n                </div>\r\n                <div className=\"enddate\">\r\n                    <p>End date:</p>\r\n                    <DatePicker\r\n                        minDate={startDate}\r\n                        dateFormat=\"dd/MM/yyyy\"\r\n                        maxDate={endDate}\r\n                        selected={endDate}\r\n                        onChange={date => this.dateChangeFetchData(null, date.getTime())}\r\n                        selectsEnd\r\n                        startDate={startDate}\r\n                        endDate={endDate}\r\n                        minDate={startDate}\r\n                        placeholderText=\"End Date\"\r\n                    />\r\n                </div>\r\n                <button className=\"reset\" onClick={this.getDateRange}>Reset</button>\r\n                <DoughnutChart data={data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashBoard;","import DashBoard from './components/DashboardComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DashBoard />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}